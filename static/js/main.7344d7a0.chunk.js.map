{"version":3,"sources":["redux/phonebookApi.js","redux/store.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","providesTags","addContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","id","useGetContactsQuery","useAddContactMutation","useDeleteContactMutation","store","configureStore","reducer","middleware","getDefaultMiddleware","devtools","process","setupListeners","dispatch","ContactForm","contacts","data","onSubmit","e","preventDefault","name","currentTarget","value","phone","find","contact","toLowerCase","toast","info","reset","autoClose","className","type","pattern","title","required","ContactList","map","onClick","Container","children","Filter","onChange","placeholder","App","useState","filter","setFilter","includes","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7344d7a0.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: \"contactsApi\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://61921b12aeab5c0017105d39.mockapi.io/api/v1\",\r\n  }),\r\n  tagTypes: [\"Contact\"],\r\n  endpoints: (builder) => ({\r\n    getContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: [\"Contact\"],\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: (newContact) => ({\r\n        url: \"/contacts\",\r\n        method: \"POST\",\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: [\"Contact\"],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/contacts/${id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Contact\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetContactsQuery,\r\n  useAddContactMutation,\r\n  useDeleteContactMutation,\r\n} = contactsApi;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { contactsApi } from \"./phonebookApi\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/dist/query\";\r\n\r\nconst store = configureStore({\r\n  reducer: { [contactsApi.reducerPath]: contactsApi.reducer },\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware(),\r\n    contactsApi.middleware,\r\n  ],\r\n  // devTools: true,\r\n  devtools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\nexport default store;\r\n","import \"../ContactForm/ContactForm.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport {\r\n  useAddContactMutation,\r\n  useGetContactsQuery,\r\n} from \"../../redux/phonebookApi\";\r\n\r\nfunction ContactForm() {\r\n  const [addContact] = useAddContactMutation();\r\n  const { data: contacts } = useGetContactsQuery();\r\n\r\n  const handleSubmite = (e) => {\r\n    e.preventDefault();\r\n    const name = e.currentTarget.name.value;\r\n    const phone = e.currentTarget.phone.value;\r\n    const newContact = {\r\n      name,\r\n      phone,\r\n    };\r\n    if (\r\n      contacts.find(\r\n        (contact) => name.toLowerCase() === contact.name.toLowerCase()\r\n      )\r\n    ) {\r\n      toast.info(`🤔 \"${name}\" contact is already in use`);\r\n      e.currentTarget.reset();\r\n      return;\r\n    } else if (contacts.find((contact) => phone === contact.phone)) {\r\n      toast.info(`🤔 \"${phone}\" is already in use`, {\r\n        autoClose: 2500,\r\n      });\r\n    }\r\n    addContact(newContact);\r\n    e.currentTarget.reset();\r\n  };\r\n\r\n  return (\r\n    <form id=\"contact\" onSubmit={handleSubmite}>\r\n      <label>\r\n        <p>Name:</p>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        <p>Number:</p>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"tel\"\r\n          name=\"phone\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className=\"submit-button\">\r\n        Add contact\r\n      </button>\r\n      <ToastContainer />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import \"../ContactList/ContactList.css\";\r\nimport { useDeleteContactMutation } from \"../../redux/phonebookApi\";\r\n\r\nfunction ContactList({ contacts }) {\r\n  const [deleteContact] = useDeleteContactMutation();\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id}>\r\n          <p>Name: {contact.name}</p>\r\n          <p>Number: {contact.phone}</p>\r\n          <button type=\"button\" onClick={() => deleteContact(contact.id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","// import T from \"prop-types\";\r\nimport \"../Container/Container.css\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\n// Container.propTypes = {\r\n//   children: T.node.isRequired,\r\n// };\r\n\r\nexport default Container;\r\n","import \"../Filter/Filter.css\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      placeholder=\"Filter: enter some letters to search contact\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Container from \"./components/Container/Container\";\nimport Filter from \"./components/Filter/Filter\";\nimport { useState } from \"react\";\nimport { useGetContactsQuery } from \"./redux/phonebookApi\";\n\nfunction App() {\n  const { data } = useGetContactsQuery(\"\");\n\n  const [filter, setFilter] = useState(\"\");\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const contactFilter = () => {\n    return data.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      {data && <ContactForm contacts={data} />}\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      {data && <ContactList contacts={contactFilter()} />}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}